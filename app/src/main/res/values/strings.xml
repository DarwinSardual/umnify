<resources>
    <string name="app_name">UMnify</string>
    <string name="long_text">Of course, some code must have been written to govern the behaviors of the widgets and
        Views in our samples above. The CoordinatorLayout automatically does all this already. However, you might want
        to define your own reactions and behaviors, rather than use the default and standard behaviors. It is remarkably
        easy to do. The complexity lies in how unique a behavior you want, and not in implementing a behavior. Our
        custom behavior is really simple. From the FabFollowsWidget sample above, we want the CircleImageView to grow
        larger as the user scrolls to the end of the Cards.To define a custom behavior, we create a CustomBehavior
        class, that inherits from CoordinatorLayout.behavior class. We want the View that uses our behavior to have itâ€™s
        layout depend on another View. To achieve this, we override the layoutDependsOn method specifying what class of
        Views we want to watch out for. We also override the onDependentViewChanged method, which specifies what should
        happen when the dependent view has changed. In the sample below, we check for the position of the Toolbar
        relative to the CircleImageView, and increase the size of the CircleImageView correspondingly using setScale().
    </string>
</resources>
